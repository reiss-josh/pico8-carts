pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
objs = {}  --table of objects
padl = nil --ref to paddle
ball = nil --ref to ball
padl_spd = 2 --paddle move speed
cellw = 8
cellh = 8

--[[
		constructors!!
--]]

--makes actor at x,y
--note: x and y are read-only
--						use dx and dy instead.
function make_actor(s,x,y,w,h)
	--handle single sprites
	if(type(s) != "table") then
		w = 1 h = 1
		s = make_subs({s},8,8,1,1)
	end
	actor = {
		sp = s, --sprit
		x  = x, --cur x
		y  = y, --cur y
		dx = 0, --delta x next frame
		dy = 0, --delta y next frame
		w  = w,	--width in tiles
		h  = h,	--height in tiles
		ang= 0, --angle of movement
		spd= 0, --spd
		nam= "" --name
	}
	add(objs,actor)
	return actor
end

--makes a subsprite array
--s: array of sprites
--x,ys: size of sprites in x,y
--x,xy: how many tiles in x,y
function make_subs(sp,xs,ys,xt,yt)
	res = {}
	local xoffset = -(xt*xs)/2
	local yoffset = -(yt*ys)/2
	for i=1,xt do
		for j=1,yt do
			local ns = {
				sp = sp[i+j-1],
				x = xoffset+(i-1)*xs,
				y = yoffset+(j-1)*ys,
			}
			add(res,ns)
		end
	end
	return res
end

--[[
		helpers!!
--]]

--convert bool to number
function bnum(b)
	if(b==true) then return 1
	else return 0
	end
end

--takes "x" or "y"
--returns axis as int {-1,0,1}
function get_axis(axis)
	if(axis=="x") then
		return bnum(btn(1))-bnum(btn(0))
	else
		return bnum(btn(3))-bnum(btn(2))
	end
end

--pico-8 measures angles 0-1.0
--e.g. 0 = 0, 180 = .5, 360=1
--this fxn converts 180->0.5
function convert_deg(x)
	--bail if already converted
	if(x<= 1 and x>= 0) then return x end
	x = x%360
	x = x/360
	return x
end

--place blocks on board
function place_blocks()
	for j=1,6 do
		for i=1,14 do
			clr = flr(rnd(5))+6
			b = make_actor(clr,4+i*8,8+j*6)
			b.nam = "block"
		end
	end
end

--[[
		collision!!
--]]

--check if a pixel is solid
function solid(x, y)
	-- grab the cel value
	val=mget(x, y)
	
	-- check if flag 1 is set
	return fget(val, 1)
end

-- solid_area
-- check if a rectangle overlaps
-- with any walls

--(this version only works for
--actors less than one tile big)

function solid_area(x,y,w,h)
	return 
		solid(x+w,y) or
		solid(x-w,y) or
		solid(x,y+h) or
		solid(x,y-h)
end

function solid_actor(a, dx, dy)
 for a2 in all(objs) do
  if a2 != a then
   local x=(a.x+dx) - a2.x
   local y=(a.y+dy) - a2.y
   if ((abs(x) < (a.w+a2.w)) and
      (abs(y) < (a.h+a2.h)))
   then 
    
    -- moving together?
    -- this allows actors to
    -- overlap initially 
    -- without sticking together    
    if (dx != 0 and abs(x) <
        abs(a.x-a2.x)) then
     v=a.dx + a2.dy
     a.dx = v/2
     return a2
    end
    
    if (dy != 0 and abs(y) <
        abs(a.y-a2.y)) then
     v=a.dy + a2.dy
     a.dy=v/2
     return a2
    end
    
    --return true
    
   end
  end
 end
 return a
end

function check_movement(n)
	local tag = 0
	local newx = n.x+n.dx
	local newy = n.y+n.dy
	local w = n.w*4
	local h = n.h*4
	
--check for collision with walls
	if(newx < 8+w or newx > 120-w) then
		n.dx = 0
		return 1
	end
	if(newy < 8+h) then
		n.dy = 0
		return 1
	elseif(newy > 128-h) then
		n.dy = 0
		return 2
	end
	
--check for paddle+ball coll
	local collider = solid_actor(n,n.dx,n.dy)
	if(collider != n) then
		n.dx = 0 n.dy = 0
		if(collider.nam == "paddle") then
			return 3
		elseif(collider.nam == "block") then
			return 4
		end
	end
	
	return 0
end

--[[
		handlers!!
--]]

--sets an object up to move.
--don't actually move here.
--(handle collisions first)
function move_obj(obj)
	local ang = convert_deg(obj.ang)
	local xmv = cos(ang)*obj.spd
	local ymv = sin(ang)*obj.spd
	obj.dx += xmv
	obj.dy += ymv
end

--draws an object to screen
function draw_obj(obj)
	--if it's a multi-tile:
	if(type(obj.sp) == 'table') then
		for i=1,#obj.sp do
			local sprt = obj.sp[i]
			spr(sprt.sp,
							obj.x+sprt.x,
							obj.y+sprt.y)
		end
	--if it's a single sprite:
	else
		spr(obj.sp, obj.x, obj.y)
	end
end

--updates movement of all objs
--(adds dx/dy to x/y
-- zeroes out dx/dy)
function _update_movement(n)
	for i=1,#n do
		local tag = check_movement(n[i])
		if(tag > 0) then
			ball.ang += 90
		end
		n[i].x += n[i].dx
		n[i].y += n[i].dy
		n[i].dx = 0
		n[i].dy = 0
	end
end

--[[
		native functions!!
--]]

function _init()
	--create the ball
	ball = make_actor(001,64,64)
	ball.ang = 0
	ball.spd = 1
	ball.nam = "ball"
	--create the paddle
	local pdlsubs = make_subs(
		{002,003,004},
		8,8,3,1
	)
	padl = make_actor(
		pdlsubs,64,120,3,1
	)
	padl.nam = "padl"
	
	place_blocks()
end

function _update()
	--get input
	padl.dx += padl_spd*get_axis("x")
	padl.dy += padl_spd*get_axis("y")
	--move the ball
	move_obj(ball)
	
	_update_movement(objs)
end

function _draw()
	cls(1)
	for a=1,#objs do
		draw_obj(objs[a])
	end
	spr(005,padl.x-4,padl.y-4)
	map()
end
__gfx__
0000000000000000000000000000000000000000cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000888800666666666666666666666660cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070008888880677777777777777777777775cccccccc06666660066666600666666006666660066666600000000000000000000000000000000000000000
0007700008888880677777777777777777777775cccccccc6cccccc66aaaaaa6688888866bbbbbb66eeeeee60000000000000000000000000000000000000000
0007700008888880677777777777777777777775cccccccc6cccccc66aaaaaa6688888866bbbbbb66eeeeee60000000000000000000000000000000000000000
0070070008888880677777777777777777777775cccccccc06666660066666600666666006666660066666600000000000000000000000000000000000000000
0000000000888800055555555555555555555555cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6dddddd6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6dddddd6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6dddddd6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6dddddd6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6dddddd6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6dddddd6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
